{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport GitHub from \"next-auth/providers/github\";\n\n/**\n * NextAuth.js認証設定モジュール\n * \n * このモジュールは、アプリケーション全体の認証システムを設定します。\n * GitHub OAuthを使用してユーザー認証を行い、セッション管理と\n * ユーザー情報の管理を担当します。\n * \n * 主要機能：\n * - GitHub OAuth認証プロバイダーの設定\n * - ユーザープロファイル情報のマッピング\n * - JWTトークンの管理とカスタマイズ\n * - セッション情報の管理と拡張\n * \n * セキュリティ考慮事項：\n * - GitHub OAuthの標準的な認証フローを使用\n * - JWTトークンによる安全なセッション管理\n * - ユーザーIDの一意性保証\n * \n * 環境変数要件：\n * - AUTH_SECRET: JWT署名用の秘密鍵\n * - GITHUB_ID: GitHub OAuth AppのClient ID\n * - GITHUB_SECRET: GitHub OAuth AppのClient Secret\n */\n\n// ============================================================================\n// NextAuth.js設定\n// ============================================================================\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  // ============================================================================\n  // 認証プロバイダー設定\n  // ============================================================================\n  \n  /**\n   * 認証プロバイダーの設定\n   * \n   * このアプリケーションでは、GitHub OAuthのみを使用しています。\n   * GitHubアカウントを持っているユーザーは、簡単にログインできます。\n   */\n  providers: [\n    GitHub({\n      /**\n       * GitHubプロファイル情報のマッピング\n       * \n       * GitHubから取得したユーザー情報を、アプリケーションで使用する\n       * 形式に変換します。これにより、一貫したユーザー情報を\n       * アプリケーション全体で使用できます。\n       * \n       * @param profile - GitHubから取得したプロファイル情報\n       * @returns アプリケーション用のユーザー情報オブジェクト\n       */\n      profile(profile) {\n        return {\n          // GitHubの数値IDを文字列に変換して使用\n          // これにより、データベースでの一意性を保証\n          id: profile.id.toString(),\n          \n          // 表示名の決定ロジック\n          // GitHubのnameが設定されていない場合は、login名を使用\n          // これにより、必ず表示名が存在することを保証\n          name: profile.name || profile.login,\n          \n          // メールアドレス（GitHubで公開設定されている場合のみ）\n          // プライベート設定の場合はnullになる可能性がある\n          email: profile.email,\n          \n          // アバター画像のURL\n          // GitHubのプロフィール画像をそのまま使用\n          image: profile.avatar_url,\n        };\n      },\n    }),\n  ],\n\n  // ============================================================================\n  // コールバック設定\n  // ============================================================================\n  \n  /**\n   * 認証フロー中のコールバック関数\n   * \n   * これらのコールバックは、認証プロセスの各段階で呼び出され、\n   * トークンやセッション情報をカスタマイズできます。\n   */\n  callbacks: {\n    /**\n     * JWTトークンのカスタマイズ\n     * \n     * この関数は、JWTトークンが作成・更新される際に呼び出されます。\n     * 初回サインイン時やトークンの更新時に、GitHubのプロファイル情報を\n     * JWTトークンに保存します。\n     * \n     * @param token - 現在のJWTトークン\n     * @param profile - GitHubから取得したプロファイル情報\n     * @param user - ユーザー情報\n     * @returns カスタマイズされたJWTトークン\n     */\n    jwt({ token, profile, user }) {\n      // 初回サインイン時の処理\n      // userとprofileが存在する場合（初回サインイン時）のみ実行\n      if (user && profile) {\n        // GitHubの一意のIDをJWTトークンに保存\n        // これにより、後でセッションからユーザーIDを取得できる\n        token.id = profile.id;\n      }\n      \n      // カスタマイズされたトークンを返す\n      return token;\n    },\n\n    /**\n     * セッション情報のカスタマイズ\n     * \n     * この関数は、セッション情報が作成される際に呼び出されます。\n     * JWTトークンからユーザーIDを取得し、セッション情報に追加します。\n     * これにより、アプリケーション全体でユーザーIDを使用できます。\n     * \n     * @param session - 現在のセッション情報\n     * @param token - JWTトークン\n     * @returns カスタマイズされたセッション情報\n     */\n    session({ session, token }) {\n      // セッションにユーザー情報が存在する場合のみ処理\n      if (session?.user) {\n        // JWTトークンからGitHubの一意のIDを取得してセッションに追加\n        // これにより、購入記録の管理やユーザー識別が可能になる\n        session.user.id = token.id as string;\n      }\n      \n      // カスタマイズされたセッション情報を返す\n      return session;\n    },\n  },\n});"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AAAA;;;AA8BO,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,IAAA,wKAAQ,EAAC;IAC1D,+EAA+E;IAC/E,aAAa;IACb,+EAA+E;IAE/E;;;;;GAKC,GACD,WAAW;QACT,IAAA,wKAAM,EAAC;YACL;;;;;;;;;OASC,GACD,SAAQ,OAAO;gBACb,OAAO;oBACL,yBAAyB;oBACzB,uBAAuB;oBACvB,IAAI,QAAQ,EAAE,CAAC,QAAQ;oBAEvB,aAAa;oBACb,oCAAoC;oBACpC,wBAAwB;oBACxB,MAAM,QAAQ,IAAI,IAAI,QAAQ,KAAK;oBAEnC,gCAAgC;oBAChC,4BAA4B;oBAC5B,OAAO,QAAQ,KAAK;oBAEpB,aAAa;oBACb,yBAAyB;oBACzB,OAAO,QAAQ,UAAU;gBAC3B;YACF;QACF;KACD;IAED,+EAA+E;IAC/E,WAAW;IACX,+EAA+E;IAE/E;;;;;GAKC,GACD,WAAW;QACT;;;;;;;;;;;KAWC,GACD,KAAI,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE;YAC1B,cAAc;YACd,oCAAoC;YACpC,IAAI,QAAQ,SAAS;gBACnB,0BAA0B;gBAC1B,8BAA8B;gBAC9B,MAAM,EAAE,GAAG,QAAQ,EAAE;YACvB;YAEA,mBAAmB;YACnB,OAAO;QACT;QAEA;;;;;;;;;;KAUC,GACD,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YACxB,0BAA0B;YAC1B,IAAI,SAAS,MAAM;gBACjB,qCAAqC;gBACrC,6BAA6B;gBAC7B,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YAEA,sBAAsB;YACtB,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["export { auth as middleware } from \"../auth\";"],"names":[],"mappings":";AAAA"}}]
}