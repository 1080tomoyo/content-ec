{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/toyamatomoyo/Desktop/content-ec/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport GitHub from \"next-auth/providers/github\";\n \nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  // 認証プロバイダーにGitHubを追加する\n  providers: [\n    GitHub({\n      // GitHub のアカウント情報で使用するものを指定する\n      profile(profile) {\n        return {\n          id: profile.id.toString(),\n          name: profile.name || profile.login,\n          email: profile.email,\n          image: profile.avatar_url,\n        };\n      },\n    }),\n  ],\n  callbacks: {\n    jwt({ token, profile, user }) {\n      // 初回サインイン時にprofileからtokenにデータをコピー\n      if (user && profile) {\n        token.id = profile.id;\n      }\n      return token;\n    },\n    session({ session, token }) {\n      if (session?.user) {\n        // GitHubの一意のIDをセッションに追加\n        session.user.id = token.id as string;\n      }\n      return session;\n    },\n  },\n});"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AAAA;;;AAEO,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,IAAA,kKAAQ,EAAC;IAC1D,uBAAuB;IACvB,WAAW;QACT,IAAA,kKAAM,EAAC;YACL,8BAA8B;YAC9B,SAAQ,OAAO;gBACb,OAAO;oBACL,IAAI,QAAQ,EAAE,CAAC,QAAQ;oBACvB,MAAM,QAAQ,IAAI,IAAI,QAAQ,KAAK;oBACnC,OAAO,QAAQ,KAAK;oBACpB,OAAO,QAAQ,UAAU;gBAC3B;YACF;QACF;KACD;IACD,WAAW;QACT,KAAI,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE;YAC1B,kCAAkC;YAClC,IAAI,QAAQ,SAAS;gBACnB,MAAM,EAAE,GAAG,QAAQ,EAAE;YACvB;YACA,OAAO;QACT;QACA,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YACxB,IAAI,SAAS,MAAM;gBACjB,wBAAwB;gBACxB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YACA,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/toyamatomoyo/Desktop/content-ec/src/lib/supabase/client.ts"],"sourcesContent":["import { Database } from \"@/types/database.types\";\nimport { createClient } from \"@supabase/supabase-js\";\n \nif (!process.env.NEXT_PUBLIC_SUPABASE_URL) {\n  throw new Error(\"NEXT_PUBLIC_SUPABASE_URL is not defined\");\n}\n \nif (!process.env.SUPABASE_SERVICE_ROLE_KEY) {\n  throw new Error(\"SUPABASE_SERVICE_ROLE_KEY is not defined\");\n}\n \n// サービスロールを使ったクライアント\nconst supabaseAdmin = createClient<Database>(\n  process.env.NEXT_PUBLIC_SUPABASE_URL,\n  process.env.SUPABASE_SERVICE_ROLE_KEY,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false,\n    },\n  }\n);\n \nexport { supabaseAdmin };"],"names":[],"mappings":";;;;AACA;;AAEA;;AAIA,IAAI,CAAC,QAAQ,GAAG,CAAC,yBAAyB,EAAE;IAC1C,MAAM,IAAI,MAAM;AAClB;AAEA,oBAAoB;AACpB,MAAM,gBAAgB,IAAA,yMAAY,gFAEhC,QAAQ,GAAG,CAAC,yBAAyB,EACrC;IACE,MAAM;QACJ,kBAAkB;QAClB,gBAAgB;IAClB;AACF","debugId":null}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":["file:///Users/toyamatomoyo/Desktop/content-ec/src/lib/supabase/utils.ts"],"sourcesContent":["import { redirect } from \"next/navigation\";\nimport { auth } from \"../../../auth\";\nimport { supabaseAdmin } from \"./client\";\n \ninterface CreatePurchaseParams {\n  userIdentifier: string;\n  contentId: string;\n  paymentIntentId: string;\n  amount: number;\n}\n \n/**\n * 購入履歴を記録する\n */\nexport async function createPurchaseRecord({\n  userIdentifier,\n  contentId,\n  paymentIntentId,\n  amount,\n}: CreatePurchaseParams) {\n  const { data, error } = await supabaseAdmin\n    .from(\"purchases\")\n    .insert({\n      user_identifier: userIdentifier,\n      content_id: contentId,\n      stripe_payment_intent_id: paymentIntentId,\n      amount,\n    })\n    .select()\n    .single();\n \n  if (error) {\n    console.error(\"購入記録エラー:\", error);\n    throw error;\n  }\n \n  return data;\n}\n \n/**\n * ユーザーの既存の購入記録をチェック\n */\nexport async function checkUserPurchase(\n  userIdentifier: string,\n  contentId: string\n) {\n  try {\n    const { data } = await supabaseAdmin\n      .from(\"purchases\")\n      .select(\"id\")\n      .eq(\"user_identifier\", userIdentifier)\n      .eq(\"content_id\", contentId)\n      .maybeSingle();\n \n    return !!data;\n  } catch (error) {\n    console.error(\"購入確認エラー:\", error);\n    throw error;\n  }\n}\n \n/**\n * アクセス時に、有料コンテンツを購入していない場合はリダイレクト\n */\nexport async function checkAccessAndRedirect(\n  contentId: string,\n  contentType: \"book\" | \"article\"\n) {\n  // ログインの確認\n  const session = await auth();\n  if (!session?.user) redirect(\"/api/auth/signin\");\n \n  // 購入の確認\n  const hasPurchased = await checkUserPurchase(session.user.id!, contentId);\n  if (!hasPurchased) {\n    const redirectUrl =\n      contentType === \"book\"\n        ? `${process.env.NEXT_PUBLIC_BASE_URL}/books/${contentId}`\n        : `${process.env.NEXT_PUBLIC_BASE_URL}/#articles`;\n \n    redirect(redirectUrl);\n  }\n}"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AACA;AACA;;;;AAYO,eAAe,qBAAqB,EACzC,cAAc,EACd,SAAS,EACT,eAAe,EACf,MAAM,EACe;IACrB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,mJAAa,CACxC,IAAI,CAAC,aACL,MAAM,CAAC;QACN,iBAAiB;QACjB,YAAY;QACZ,0BAA0B;QAC1B;IACF,GACC,MAAM,GACN,MAAM;IAET,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,YAAY;QAC1B,MAAM;IACR;IAEA,OAAO;AACT;AAKO,eAAe,kBACpB,cAAsB,EACtB,SAAiB;IAEjB,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,mJAAa,CACjC,IAAI,CAAC,aACL,MAAM,CAAC,MACP,EAAE,CAAC,mBAAmB,gBACtB,EAAE,CAAC,cAAc,WACjB,WAAW;QAEd,OAAO,CAAC,CAAC;IACX,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,YAAY;QAC1B,MAAM;IACR;AACF;AAKO,eAAe,uBACpB,SAAiB,EACjB,WAA+B;IAE/B,UAAU;IACV,MAAM,UAAU,MAAM,IAAA,8GAAI;IAC1B,IAAI,CAAC,SAAS,MAAM,IAAA,mMAAQ,EAAC;IAE7B,QAAQ;IACR,MAAM,eAAe,MAAM,kBAAkB,QAAQ,IAAI,CAAC,EAAE,EAAG;IAC/D,IAAI,CAAC,cAAc;QACjB,MAAM,cACJ,gBAAgB,SACZ,2DAAoC,OAAO,EAAE,WAAW,GACxD,2DAAoC,UAAU,CAAC;QAErD,IAAA,mMAAQ,EAAC;IACX;AACF","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///Users/toyamatomoyo/Desktop/content-ec/src/lib/stripe.ts"],"sourcesContent":["import Stripe from \"stripe\";\n \nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error(\"STRIPE_SECRET_KEY is not defined\");\n}\n \nexport const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2025-08-27.basil\",\n});\n \n// 購入記録に含めるメタデータのキー\nexport const METADATA_KEYS = {\n  USER_IDENTIFIER: \"user-identifier\",\n  CONTENT_ID: \"content-id\",\n  PRICE: \"price\",\n  VERSION: \"version\",\n} as const;\n \nexport const CURRENT_VERSION = \"v1\";"],"names":[],"mappings":";;;;;;;;AAAA;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,iBAAiB,EAAE;IAClC,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,SAAS,IAAI,mKAAM,CAAC,QAAQ,GAAG,CAAC,iBAAiB,EAAE;IAC9D,YAAY;AACd;AAGO,MAAM,gBAAgB;IAC3B,iBAAiB;IACjB,YAAY;IACZ,OAAO;IACP,SAAS;AACX;AAEO,MAAM,kBAAkB","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///Users/toyamatomoyo/Desktop/content-ec/src/app/api/webhooks/stripe/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport type { Stripe } from \"stripe\";\nimport { checkUserPurchase, createPurchaseRecord } from \"@/lib/supabase/utils\";\nimport { METADATA_KEYS, stripe } from \"@/lib/stripe\";\n \n// 購入完了時にSupabaseに記録する\nasync function recordCompletedPurchase(session: Stripe.Checkout.Session) {\n  const metadata = session.metadata || {};\n \n  // メタデータからデータを取得\n  const userIdentifier = metadata[METADATA_KEYS.USER_IDENTIFIER];\n  const contentId = metadata[METADATA_KEYS.CONTENT_ID];\n  const price = parseInt(metadata[METADATA_KEYS.PRICE] || \"0\", 10);\n \n  if (!userIdentifier || !contentId || isNaN(price)) {\n    throw new Error(\"必要なメタデータが不足しています\");\n  }\n \n  // 支払い状態のチェック\n  if (session.payment_status !== \"paid\") {\n    console.log(\n      `支払いがまだ完了していません: ${session.id}, status=${session.payment_status}`\n    );\n    return false;\n  }\n \n  // payment_intentの取得\n  let paymentIntentId: string | null = null;\n  if (typeof session.payment_intent === \"string\") {\n    paymentIntentId = session.payment_intent;\n  } else if (\n    session.payment_intent &&\n    typeof session.payment_intent === \"object\"\n  ) {\n    paymentIntentId = session.payment_intent.id;\n  }\n \n  const existingPurchase = await checkUserPurchase(userIdentifier, contentId);\n  // 既存の購入記録があれば処理をスキップ\n  if (existingPurchase) {\n    console.log(\n      `既に購入済み: ユーザー=${userIdentifier}, コンテンツ=${contentId}`\n    );\n    return true;\n  }\n \n  // 新規購入を記録\n  const data = await createPurchaseRecord({\n    userIdentifier,\n    contentId,\n    paymentIntentId: paymentIntentId || \"\",\n    amount: price,\n  });\n \n  return !!data;\n}\n \nexport async function POST(req: NextRequest) {\n  try {\n    const signature = req.headers.get(\"stripe-signature\");\n    if (!signature) {\n      return new NextResponse(\"Stripe署名がありません\", { status: 401 });\n    }\n \n    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n    if (!webhookSecret) {\n      throw new Error(\"STRIPE_WEBHOOK_SECRET環境変数が設定されていません\");\n    }\n \n    const body = await req.text();\n \n    let event: Stripe.Event;\n    try {\n      event = await stripe.webhooks.constructEventAsync(\n        body,\n        signature,\n        webhookSecret\n      );\n    } catch (error) {\n      const message = error instanceof Error ? error.message : \"不明なエラー\";\n      console.error(`Webhook署名検証失敗: ${message}`);\n      return new NextResponse(`Webhook Error: ${message}`, { status: 400 });\n    }\n \n    // イベントタイプに基づく処理\n    switch (event.type) {\n      case \"checkout.session.completed\":\n        const session = event.data.object as Stripe.Checkout.Session;\n \n        // 支払いが完了した時点でSupabaseに記録する\n        await recordCompletedPurchase(session);\n        break;\n \n      default:\n        console.log(`未処理のイベントタイプ: ${event.type}`);\n    }\n \n    return new NextResponse(null, { status: 200 });\n  } catch (error) {\n    const message = error instanceof Error ? error.message : \"不明なエラー\";\n    console.error(`Webhook処理エラー: ${message}`);\n    return new NextResponse(`Webhook Error: ${message}`, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;;;;AAEA,sBAAsB;AACtB,eAAe,wBAAwB,OAAgC;IACrE,MAAM,WAAW,QAAQ,QAAQ,IAAI,CAAC;IAEtC,gBAAgB;IAChB,MAAM,iBAAiB,QAAQ,CAAC,uIAAa,CAAC,eAAe,CAAC;IAC9D,MAAM,YAAY,QAAQ,CAAC,uIAAa,CAAC,UAAU,CAAC;IACpD,MAAM,QAAQ,SAAS,QAAQ,CAAC,uIAAa,CAAC,KAAK,CAAC,IAAI,KAAK;IAE7D,IAAI,CAAC,kBAAkB,CAAC,aAAa,MAAM,QAAQ;QACjD,MAAM,IAAI,MAAM;IAClB;IAEA,aAAa;IACb,IAAI,QAAQ,cAAc,KAAK,QAAQ;QACrC,QAAQ,GAAG,CACT,CAAC,gBAAgB,EAAE,QAAQ,EAAE,CAAC,SAAS,EAAE,QAAQ,cAAc,EAAE;QAEnE,OAAO;IACT;IAEA,oBAAoB;IACpB,IAAI,kBAAiC;IACrC,IAAI,OAAO,QAAQ,cAAc,KAAK,UAAU;QAC9C,kBAAkB,QAAQ,cAAc;IAC1C,OAAO,IACL,QAAQ,cAAc,IACtB,OAAO,QAAQ,cAAc,KAAK,UAClC;QACA,kBAAkB,QAAQ,cAAc,CAAC,EAAE;IAC7C;IAEA,MAAM,mBAAmB,MAAM,IAAA,sJAAiB,EAAC,gBAAgB;IACjE,qBAAqB;IACrB,IAAI,kBAAkB;QACpB,QAAQ,GAAG,CACT,CAAC,aAAa,EAAE,eAAe,QAAQ,EAAE,WAAW;QAEtD,OAAO;IACT;IAEA,UAAU;IACV,MAAM,OAAO,MAAM,IAAA,yJAAoB,EAAC;QACtC;QACA;QACA,iBAAiB,mBAAmB;QACpC,QAAQ;IACV;IAEA,OAAO,CAAC,CAAC;AACX;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,YAAY,IAAI,OAAO,CAAC,GAAG,CAAC;QAClC,IAAI,CAAC,WAAW;YACd,OAAO,IAAI,gJAAY,CAAC,kBAAkB;gBAAE,QAAQ;YAAI;QAC1D;QAEA,MAAM,gBAAgB,QAAQ,GAAG,CAAC,qBAAqB;QACvD,IAAI,CAAC,eAAe;YAClB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,IAAI;QACJ,IAAI;YACF,QAAQ,MAAM,gIAAM,CAAC,QAAQ,CAAC,mBAAmB,CAC/C,MACA,WACA;QAEJ,EAAE,OAAO,OAAO;YACd,MAAM,UAAU,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YACzD,QAAQ,KAAK,CAAC,CAAC,eAAe,EAAE,SAAS;YACzC,OAAO,IAAI,gJAAY,CAAC,CAAC,eAAe,EAAE,SAAS,EAAE;gBAAE,QAAQ;YAAI;QACrE;QAEA,gBAAgB;QAChB,OAAQ,MAAM,IAAI;YAChB,KAAK;gBACH,MAAM,UAAU,MAAM,IAAI,CAAC,MAAM;gBAEjC,2BAA2B;gBAC3B,MAAM,wBAAwB;gBAC9B;YAEF;gBACE,QAAQ,GAAG,CAAC,CAAC,aAAa,EAAE,MAAM,IAAI,EAAE;QAC5C;QAEA,OAAO,IAAI,gJAAY,CAAC,MAAM;YAAE,QAAQ;QAAI;IAC9C,EAAE,OAAO,OAAO;QACd,MAAM,UAAU,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACzD,QAAQ,KAAK,CAAC,CAAC,cAAc,EAAE,SAAS;QACxC,OAAO,IAAI,gJAAY,CAAC,CAAC,eAAe,EAAE,SAAS,EAAE;YAAE,QAAQ;QAAI;IACrE;AACF","debugId":null}}]
}