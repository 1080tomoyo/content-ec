{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/toyamatomoyo/Desktop/content-ec/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport GitHub from \"next-auth/providers/github\";\n \nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  // 認証プロバイダーにGitHubを追加する\n  providers: [\n    GitHub({\n      // GitHub のアカウント情報で使用するものを指定する\n      profile(profile) {\n        return {\n          id: profile.id.toString(),\n          name: profile.name || profile.login,\n          email: profile.email,\n          image: profile.avatar_url,\n        };\n      },\n    }),\n  ],\n  callbacks: {\n    jwt({ token, profile, user }) {\n      // 初回サインイン時にprofileからtokenにデータをコピー\n      if (user && profile) {\n        token.id = profile.id;\n      }\n      return token;\n    },\n    session({ session, token }) {\n      if (session?.user) {\n        // GitHubの一意のIDをセッションに追加\n        session.user.id = token.id as string;\n      }\n      return session;\n    },\n  },\n});"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AAAA;;;AAEO,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,IAAA,kKAAQ,EAAC;IAC1D,uBAAuB;IACvB,WAAW;QACT,IAAA,kKAAM,EAAC;YACL,8BAA8B;YAC9B,SAAQ,OAAO;gBACb,OAAO;oBACL,IAAI,QAAQ,EAAE,CAAC,QAAQ;oBACvB,MAAM,QAAQ,IAAI,IAAI,QAAQ,KAAK;oBACnC,OAAO,QAAQ,KAAK;oBACpB,OAAO,QAAQ,UAAU;gBAC3B;YACF;QACF;KACD;IACD,WAAW;QACT,KAAI,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE;YAC1B,kCAAkC;YAClC,IAAI,QAAQ,SAAS;gBACnB,MAAM,EAAE,GAAG,QAAQ,EAAE;YACvB;YACA,OAAO;QACT;QACA,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YACxB,IAAI,SAAS,MAAM;gBACjB,wBAAwB;gBACxB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YACA,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/toyamatomoyo/Desktop/content-ec/src/lib/supabase/client.ts"],"sourcesContent":["import { Database } from \"@/types/database.types\";\nimport { createClient } from \"@supabase/supabase-js\";\n \nif (!process.env.NEXT_PUBLIC_SUPABASE_URL) {\n  throw new Error(\"NEXT_PUBLIC_SUPABASE_URL is not defined\");\n}\n \nif (!process.env.SUPABASE_SERVICE_ROLE_KEY) {\n  throw new Error(\"SUPABASE_SERVICE_ROLE_KEY is not defined\");\n}\n \n// サービスロールを使ったクライアント\nconst supabaseAdmin = createClient<Database>(\n  process.env.NEXT_PUBLIC_SUPABASE_URL,\n  process.env.SUPABASE_SERVICE_ROLE_KEY,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false,\n    },\n  }\n);\n \nexport { supabaseAdmin };"],"names":[],"mappings":";;;;AACA;;AAEA;;AAIA,IAAI,CAAC,QAAQ,GAAG,CAAC,yBAAyB,EAAE;IAC1C,MAAM,IAAI,MAAM;AAClB;AAEA,oBAAoB;AACpB,MAAM,gBAAgB,IAAA,yMAAY,gFAEhC,QAAQ,GAAG,CAAC,yBAAyB,EACrC;IACE,MAAM;QACJ,kBAAkB;QAClB,gBAAgB;IAClB;AACF","debugId":null}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":["file:///Users/toyamatomoyo/Desktop/content-ec/src/lib/supabase/utils.ts"],"sourcesContent":["import { redirect } from \"next/navigation\";\nimport { auth } from \"../../../auth\";\nimport { supabaseAdmin } from \"./client\";\n \ninterface CreatePurchaseParams {\n  userIdentifier: string;\n  contentId: string;\n  paymentIntentId: string;\n  amount: number;\n}\n \n/**\n * 購入履歴を記録する\n */\nexport async function createPurchaseRecord({\n  userIdentifier,\n  contentId,\n  paymentIntentId,\n  amount,\n}: CreatePurchaseParams) {\n  const { data, error } = await supabaseAdmin\n    .from(\"purchases\")\n    .insert({\n      user_identifier: userIdentifier,\n      content_id: contentId,\n      stripe_payment_intent_id: paymentIntentId,\n      amount,\n    })\n    .select()\n    .single();\n \n  if (error) {\n    console.error(\"購入記録エラー:\", error);\n    throw error;\n  }\n \n  return data;\n}\n \n/**\n * ユーザーの既存の購入記録をチェック\n */\nexport async function checkUserPurchase(\n  userIdentifier: string,\n  contentId: string\n) {\n  try {\n    const { data } = await supabaseAdmin\n      .from(\"purchases\")\n      .select(\"id\")\n      .eq(\"user_identifier\", userIdentifier)\n      .eq(\"content_id\", contentId)\n      .maybeSingle();\n \n    return !!data;\n  } catch (error) {\n    console.error(\"購入確認エラー:\", error);\n    throw error;\n  }\n}\n \n/**\n * アクセス時に、有料コンテンツを購入していない場合はリダイレクト\n */\nexport async function checkAccessAndRedirect(\n  contentId: string,\n  contentType: \"book\" | \"article\"\n) {\n  // ログインの確認\n  const session = await auth();\n  if (!session?.user) redirect(\"/api/auth/signin\");\n \n  // 購入の確認\n  const hasPurchased = await checkUserPurchase(session.user.id!, contentId);\n  if (!hasPurchased) {\n    const redirectUrl =\n      contentType === \"book\"\n        ? `${process.env.NEXT_PUBLIC_BASE_URL}/books/${contentId}`\n        : `${process.env.NEXT_PUBLIC_BASE_URL}/#articles`;\n \n    redirect(redirectUrl);\n  }\n}"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AACA;AACA;;;;AAYO,eAAe,qBAAqB,EACzC,cAAc,EACd,SAAS,EACT,eAAe,EACf,MAAM,EACe;IACrB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,mJAAa,CACxC,IAAI,CAAC,aACL,MAAM,CAAC;QACN,iBAAiB;QACjB,YAAY;QACZ,0BAA0B;QAC1B;IACF,GACC,MAAM,GACN,MAAM;IAET,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,YAAY;QAC1B,MAAM;IACR;IAEA,OAAO;AACT;AAKO,eAAe,kBACpB,cAAsB,EACtB,SAAiB;IAEjB,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,mJAAa,CACjC,IAAI,CAAC,aACL,MAAM,CAAC,MACP,EAAE,CAAC,mBAAmB,gBACtB,EAAE,CAAC,cAAc,WACjB,WAAW;QAEd,OAAO,CAAC,CAAC;IACX,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,YAAY;QAC1B,MAAM;IACR;AACF;AAKO,eAAe,uBACpB,SAAiB,EACjB,WAA+B;IAE/B,UAAU;IACV,MAAM,UAAU,MAAM,IAAA,8GAAI;IAC1B,IAAI,CAAC,SAAS,MAAM,IAAA,mMAAQ,EAAC;IAE7B,QAAQ;IACR,MAAM,eAAe,MAAM,kBAAkB,QAAQ,IAAI,CAAC,EAAE,EAAG;IAC/D,IAAI,CAAC,cAAc;QACjB,MAAM,cACJ,gBAAgB,SACZ,2DAAoC,OAAO,EAAE,WAAW,GACxD,2DAAoC,UAAU,CAAC;QAErD,IAAA,mMAAQ,EAAC;IACX;AACF","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///Users/toyamatomoyo/Desktop/content-ec/src/lib/stripe.ts"],"sourcesContent":["import Stripe from \"stripe\";\n \nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error(\"STRIPE_SECRET_KEY is not defined\");\n}\n \nexport const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2025-08-27.basil\",\n});\n \n// 購入記録に含めるメタデータのキー\nexport const METADATA_KEYS = {\n  USER_IDENTIFIER: \"user-identifier\",\n  CONTENT_ID: \"content-id\",\n  PRICE: \"price\",\n  VERSION: \"version\",\n} as const;\n \nexport const CURRENT_VERSION = \"v1\";"],"names":[],"mappings":";;;;;;;;AAAA;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,iBAAiB,EAAE;IAClC,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,SAAS,IAAI,mKAAM,CAAC,QAAQ,GAAG,CAAC,iBAAiB,EAAE;IAC9D,YAAY;AACd;AAGO,MAAM,gBAAgB;IAC3B,iBAAiB;IACjB,YAAY;IACZ,OAAO;IACP,SAAS;AACX;AAEO,MAAM,kBAAkB","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///Users/toyamatomoyo/Desktop/content-ec/src/app/api/create-checkout-session/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport type { Stripe } from \"stripe\";\nimport { auth } from \"../../../../auth\";\nimport { checkUserPurchase } from \"@/lib/supabase/utils\";\nimport { CURRENT_VERSION, METADATA_KEYS, stripe } from \"@/lib/stripe\";\n \n// コンテンツ購入用のStripeセッションを作成\nasync function createCheckoutSession(\n  userIdentifier: string,\n  contentId: string,\n  title: string,\n  price: number,\n  contentType: \"book\" | \"article\"\n): Promise<Stripe.Checkout.Session> {\n  const APP_BASE_URL = process.env.NEXT_PUBLIC_BASE_URL;\n  if (!APP_BASE_URL) {\n    throw new Error(\"BASE_URL が設定されていません\");\n  }\n \n  const successUrl =\n    contentType === \"book\"\n      ? `${APP_BASE_URL}/books/${contentId}?success=true`\n      : `${APP_BASE_URL}/posts/${contentId}?success=true`;\n \n  const sessionParams: Stripe.Checkout.SessionCreateParams = {\n    payment_method_types: [\"card\"],\n    line_items: [\n      {\n        price_data: {\n          currency: \"jpy\",\n          product_data: {\n            name: title,\n            description: `コンテンツID: ${contentId}`,\n          },\n          unit_amount: price,\n        },\n        quantity: 1,\n      },\n    ],\n    mode: \"payment\",\n    // webhookで使用するためのメタデータを記載\n    metadata: {\n      [METADATA_KEYS.USER_IDENTIFIER]: userIdentifier,\n      [METADATA_KEYS.CONTENT_ID]: contentId,\n      [METADATA_KEYS.PRICE]: price.toString(),\n      [METADATA_KEYS.VERSION]: CURRENT_VERSION,\n    },\n    success_url: successUrl,\n    cancel_url: APP_BASE_URL,\n  };\n \n  return stripe.checkout.sessions.create(sessionParams);\n}\n \ntype RequestData = {\n  contentId: string;\n  price: number;\n  title: string;\n  contentType: \"book\" | \"article\";\n};\n \nexport async function POST(req: NextRequest) {\n  try {\n    // Auth.jsからセッション情報を取得\n    const session = await auth();\n \n    if (!session || !session.user) {\n      return new NextResponse(\"認証が必要です\", { status: 401 });\n    }\n \n    const { contentId, price, title, contentType }: RequestData =\n      await req.json();\n \n    if (!contentId || !price || !title || !contentType) {\n      return new NextResponse(\"必要な情報が不足しています\", { status: 400 });\n    }\n \n    // ユーザー識別子を取得 (GitHubのID)\n    const userIdentifier = session.user.id;\n \n    if (!userIdentifier) {\n      return new NextResponse(\"ユーザー識別子が取得できません\", {\n        status: 400,\n      });\n    }\n \n    // すでに購入済みの場合、リダイレクトさせる\n    const existingPurchase = await checkUserPurchase(userIdentifier, contentId);\n    // 既存の購入記録があれば処理をスキップ\n    if (existingPurchase) {\n      console.log(\n        `既に購入済み: ユーザー=${userIdentifier}, コンテンツ=${contentId}`\n      );\n      return NextResponse.json({\n        url:\n          contentType === \"book\"\n            ? `${process.env.NEXT_PUBLIC_BASE_URL}/books/${contentId}`\n            : `${process.env.NEXT_PUBLIC_BASE_URL}/posts/${contentId}`,\n      });\n    }\n \n    // Stripeのセッションを作成\n    const stripeSession = await createCheckoutSession(\n      userIdentifier!,\n      contentId,\n      title,\n      price,\n      contentType\n    );\n \n    // チェックアウトURLを返す（クライアント側でリダイレクト）\n    return NextResponse.json({\n      sessionId: stripeSession.id,\n      url: stripeSession.url,\n    });\n  } catch (error) {\n    console.error(\"Checkout session error:\", error);\n    return new NextResponse(\"内部エラーが発生しました\", { status: 500 });\n  }\n}"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;;;;;AAEA,0BAA0B;AAC1B,eAAe,sBACb,cAAsB,EACtB,SAAiB,EACjB,KAAa,EACb,KAAa,EACb,WAA+B;IAE/B,MAAM;IACN;;IAIA,MAAM,aACJ,gBAAgB,SACZ,GAAG,aAAa,OAAO,EAAE,UAAU,aAAa,CAAC,GACjD,GAAG,aAAa,OAAO,EAAE,UAAU,aAAa,CAAC;IAEvD,MAAM,gBAAqD;QACzD,sBAAsB;YAAC;SAAO;QAC9B,YAAY;YACV;gBACE,YAAY;oBACV,UAAU;oBACV,cAAc;wBACZ,MAAM;wBACN,aAAa,CAAC,SAAS,EAAE,WAAW;oBACtC;oBACA,aAAa;gBACf;gBACA,UAAU;YACZ;SACD;QACD,MAAM;QACN,0BAA0B;QAC1B,UAAU;YACR,CAAC,uIAAa,CAAC,eAAe,CAAC,EAAE;YACjC,CAAC,uIAAa,CAAC,UAAU,CAAC,EAAE;YAC5B,CAAC,uIAAa,CAAC,KAAK,CAAC,EAAE,MAAM,QAAQ;YACrC,CAAC,uIAAa,CAAC,OAAO,CAAC,EAAE,yIAAe;QAC1C;QACA,aAAa;QACb,YAAY;IACd;IAEA,OAAO,gIAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;AACzC;AASO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,sBAAsB;QACtB,MAAM,UAAU,MAAM,IAAA,8GAAI;QAE1B,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,EAAE;YAC7B,OAAO,IAAI,gJAAY,CAAC,WAAW;gBAAE,QAAQ;YAAI;QACnD;QAEA,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,GAC5C,MAAM,IAAI,IAAI;QAEhB,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC,aAAa;YAClD,OAAO,IAAI,gJAAY,CAAC,iBAAiB;gBAAE,QAAQ;YAAI;QACzD;QAEA,yBAAyB;QACzB,MAAM,iBAAiB,QAAQ,IAAI,CAAC,EAAE;QAEtC,IAAI,CAAC,gBAAgB;YACnB,OAAO,IAAI,gJAAY,CAAC,mBAAmB;gBACzC,QAAQ;YACV;QACF;QAEA,uBAAuB;QACvB,MAAM,mBAAmB,MAAM,IAAA,sJAAiB,EAAC,gBAAgB;QACjE,qBAAqB;QACrB,IAAI,kBAAkB;YACpB,QAAQ,GAAG,CACT,CAAC,aAAa,EAAE,eAAe,QAAQ,EAAE,WAAW;YAEtD,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,KACE,gBAAgB,SACZ,2DAAoC,OAAO,EAAE,WAAW,GACxD,2DAAoC,OAAO,EAAE,WAAW;YAChE;QACF;QAEA,kBAAkB;QAClB,MAAM,gBAAgB,MAAM,sBAC1B,gBACA,WACA,OACA,OACA;QAGF,gCAAgC;QAChC,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,WAAW,cAAc,EAAE;YAC3B,KAAK,cAAc,GAAG;QACxB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,IAAI,gJAAY,CAAC,gBAAgB;YAAE,QAAQ;QAAI;IACxD;AACF","debugId":null}}]
}