"use client";

import { useState } from "react";
import { Button } from "./ui/button";
import ErrorToast from "./ui/error-toast";

/**
 * 購入ボタンコンポーネント
 * 
 * このコンポーネントは、ユーザーがコンテンツを購入するためのボタンです　。
 * 
 * 主要機能：
 * - 購入処理の開始
 * - ローディング状態の管理
 * - エラーハンドリングと表示
 * - 認証状態の確認
 * - Stripe決済ページへのリダイレクト
 * 
 * 処理の流れ：
 * 1. ボタンクリック時の購入処理開始
 * 2. APIエンドポイントへの決済セッション作成リクエスト
 * 3. 認証エラーの場合はログインページへリダイレクト
 * 4. 成功時はStripe決済ページへリダイレクト
 * 5. エラー時はユーザーフレンドリーなエラーメッセージを表示
 * 
 * セキュリティ考慮事項：
 * - 認証状態の確認
 * - 適切なエラーハンドリング
 * - ユーザー情報の保護
 * 
 * 使用場面：
 * - 記事詳細ページ
 * - 本の詳細ページ
 * - コンテンツ一覧ページ
 */

// ============================================================================
// 型定義
// ============================================================================

/**
 * 購入ボタンのプロパティ型定義
 * 
 * @interface PurchaseButtonProps
 * @property contentId - 購入するコンテンツのID
 * @property price - 価格（円）
 * @property title - コンテンツのタイトル
 * @property contentType - コンテンツの種類（"book" または "article"）
 * @property size - ボタンのサイズ（オプション）
 * @property className - 追加のCSSクラス（オプション）
 */
type PurchaseButtonProps = {
  contentId: string;
  price: number;
  title: string;
  contentType: "book" | "article";
  size?: "default" | "sm" | "lg" | "icon";
  className?: string;
};
 
// ============================================================================
// メインコンポーネント
// ============================================================================

/**
 * 購入ボタンコンポーネント
 * 
 * @param props - 購入ボタンのプロパティ
 * @returns JSX.Element - 購入ボタンとエラートーストの要素
 * 
 * このコンポーネントは、ユーザーがコンテンツを購入するためのボタンです　。
 * 
 * 状態管理：
 * - loading: 購入処理中のローディング状態
 * - error: エラーメッセージの表示状態
 * 
 * ユーザーエクスペリエンス：
 * - ローディング中の視覚的フィードバック
 * - エラー時の分かりやすいメッセージ
 * - 認証エラー時の自動リダイレクト
 */
export default function PurchaseButton(props: PurchaseButtonProps) {
  // ============================================================================
  // 状態管理
  // ============================================================================
  
  // 購入処理中のローディング状態を管理
  // これにより、ユーザーに処理中であることを視覚的に伝える
  const [loading, setLoading] = useState(false);
  
  // エラーメッセージの表示状態を管理
  // エラーが発生した場合にユーザーフレンドリーなメッセージを表示
  const [error, setError] = useState<string | null>(null);

  // ============================================================================
  // 購入処理関数
  // ============================================================================
  
  /**
   * 購入処理を実行する関数
   * 
   * この関数は、ユーザーが購入ボタンをクリックした際に呼び出され、
   * 以下の処理を順次実行します：
   * 
   * 処理の流れ：
   * 1. ローディング状態を開始
   * 2. 決済セッション作成APIにリクエストを送信
   * 3. 認証エラーの場合はログインページへリダイレクト
   * 4. 成功時はStripe決済ページへリダイレクト
   * 5. エラー時はエラーメッセージを表示
   * 6. ローディング状態を終了
   * 
   * エラーハンドリング：
   * - 認証エラー（401）: ログインページへの自動リダイレクト
   * - APIエラー: ユーザーフレンドリーなエラーメッセージ
   * - ネットワークエラー: 再試行を促すメッセージ
   */
  const handlePurchase = async () => {
    try {
      // ローディング状態を開始
      // これにより、ユーザーに処理中であることを伝える
      setLoading(true);
      
      // 決済セッション作成APIにリクエストを送信
      // 購入に必要な情報をJSON形式で送信
      const response = await fetch("/api/create-checkout-session", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          contentId: props.contentId,
          price: props.price,
          title: props.title,
          contentType: props.contentType,
        }),
      });
      
      // 認証エラーの場合の処理
      // ユーザーがログインしていない場合
      if (response.status === 401) {
        // エラーメッセージを設定
        setError("認証が必要です。ログインしてください。");
        
        // 2秒後にログインページへ自動リダイレクト
        // これにより、ユーザーは認証が必要であることを理解してからリダイレクト
        setTimeout(() => {
          window.location.href = "/api/auth/signin";
        }, 2000);
        return;
      }
      
      // その他のAPIエラーの場合
      if (!response.ok) {
        throw new Error("購入処理エラー");
      }

      // 成功時の処理
      // レスポンスから決済セッション情報を取得
      const data = await response.json();
      
      // Stripeの決済ページへリダイレクト
      // これにより、ユーザーは決済を完了できる
      window.location.href = data.url;
      
    } catch (error) {
      // エラーの詳細をログに記録
      // これにより、デバッグとトラブルシューティングが容易になる
      console.error(error);
      
      // ユーザーフレンドリーなエラーメッセージを設定
      // 技術的な詳細は含めず、再試行を促すメッセージを表示
      setError("購入処理中にエラーが発生しました。しばらく時間をおいて再度お試しください。");
    } finally {
      // ローディング状態を終了
      // 成功・失敗に関わらず、必ず実行される
      setLoading(false);
    }
  };

  // ============================================================================
  // レンダリング
  // ============================================================================
  
  return (
    <>
      {/* 購入ボタン */}
      <Button
        onClick={handlePurchase}
        disabled={loading}
        size={props.size}
        className={props.className}
      >
        {/* ローディング中は「処理中...」、通常時は「今すぐ購入する」を表示 */}
        {loading ? "処理中..." : "今すぐ購入する"}
      </Button>
      
      {/* エラートースト */}
      {/* エラーが発生した場合のみ表示 */}
      {error && (
        <ErrorToast
          message={error}
          onClose={() => setError(null)}
        />
      )}
    </>
  );
}