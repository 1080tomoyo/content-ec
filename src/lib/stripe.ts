import Stripe from "stripe";
import { STRIPE_SECRET_KEY } from "@/lib/env";

/**
 * Stripe設定・ユーティリティモジュール
 * 
 * このモジュールは、Stripe決済サービスの設定と、
 * 決済処理で使用する定数を管理します。
 * 
 * 主要機能：
 * - Stripeクライアントの初期化
 * - 決済メタデータのキー定義
 * - バージョン管理
 * 
 * セキュリティ考慮事項：
 * - 秘密鍵の適切な管理
 * - APIバージョンの固定
 * - メタデータの標準化
 * 
 * 使用場面：
 * - 決済セッションの作成
 * - Webhookでの決済処理
 * - 購入記録の管理
 */

// ============================================================================
// Stripeクライアント設定
// ============================================================================

/**
 * Stripeクライアントインスタンス
 * 
 * このインスタンスは、Stripe APIとの通信に使用されます。
 * 秘密鍵を使用して初期化され、決済処理のすべての操作で使用されます。
 * 
 * 設定内容：
 * - apiVersion: 固定のAPIバージョンを使用
 * - 秘密鍵: 環境変数から取得
 * 
 * セキュリティ考慮事項：
 * - 秘密鍵は環境変数から取得し、コードに直接記述しない
 * - APIバージョンを固定することで、予期しない変更を防止
 * - 本番環境とテスト環境で異なる秘密鍵を使用
 */
export const stripe = new Stripe(STRIPE_SECRET_KEY, {
  // Stripe APIのバージョンを固定
  // これにより、APIの変更による予期しない動作を防止
  // 最新の安定版を使用することで、セキュリティと機能性を両立
  apiVersion: "2025-08-27.basil",
});

// ============================================================================
// メタデータキー定義
// ============================================================================

/**
 * 決済メタデータのキー定義
 * 
 * これらのキーは、Stripeの決済セッションやWebhookで使用される
 * メタデータの標準化されたキーです。
 * 
 * メタデータとは：
 * - Stripeの決済オブジェクトに付加できるカスタム情報
 * - 決済完了後のWebhookで取得可能
 * - 購入記録の管理や追跡に使用
 * 
 * 各キーの役割：
 * - USER_IDENTIFIER: ユーザー識別子（GitHub ID）
 * - CONTENT_ID: 購入したコンテンツのID
 * - PRICE: 決済金額
 * - VERSION: 決済処理のバージョン
 * 
 * セキュリティ考慮事項：
 * - キー名は一意で、予測困難なものにする
 * - 機密情報は含めない
 * - バージョン管理により、将来の変更に対応
 */
export const METADATA_KEYS = {
  // ユーザー識別子のキー
  // GitHubの一意のIDを格納
  USER_IDENTIFIER: "user-identifier",
  
  // コンテンツIDのキー
  // 購入した記事や本のIDを格納
  CONTENT_ID: "content-id",
  
  // 価格のキー
  // 決済金額を文字列として格納
  PRICE: "price",
  
  // バージョンのキー
  // 決済処理のバージョンを格納
  VERSION: "version",
} as const;

// ============================================================================
// バージョン管理
// ============================================================================

/**
 * 現在の決済処理バージョン
 * 
 * このバージョンは、決済処理の変更を追跡するために使用されます。
 * メタデータに含めることで、Webhookでの処理時に
 * 適切な処理ロジックを選択できます。
 * 
 * バージョン管理の重要性：
 * - 決済処理の変更履歴を追跡
 * - 後方互換性の確保
 * - デバッグとトラブルシューティングの支援
 * - 段階的な機能リリースの管理
 * 
 * バージョン変更時の考慮事項：
 * - 既存の決済データとの互換性
 * - Webhook処理の更新
 * - データベーススキーマの変更
 * - クライアント側の対応
 */
export const CURRENT_VERSION = "v1";