import NextAuth from "next-auth";
import GitHub from "next-auth/providers/github";

/**
 * NextAuth.js認証設定モジュール
 * 
 * このモジュールは、アプリケーション全体の認証システムを設定します。
 * GitHub OAuthを使用してユーザー認証を行い、セッション管理と
 * ユーザー情報の管理を担当します。
 * 
 * 主要機能：
 * - GitHub OAuth認証プロバイダーの設定
 * - ユーザープロファイル情報のマッピング
 * - JWTトークンの管理とカスタマイズ
 * - セッション情報の管理と拡張
 * 
 * セキュリティ考慮事項：
 * - GitHub OAuthの標準的な認証フローを使用
 * - JWTトークンによる安全なセッション管理
 * - ユーザーIDの一意性保証
 * 
 * 環境変数要件：
 * - AUTH_SECRET: JWT署名用の秘密鍵
 * - GITHUB_ID: GitHub OAuth AppのClient ID
 * - GITHUB_SECRET: GitHub OAuth AppのClient Secret
 */

// ============================================================================
// NextAuth.js設定
// ============================================================================

export const { handlers, signIn, signOut, auth } = NextAuth({
  // ============================================================================
  // 認証プロバイダー設定
  // ============================================================================
  
  /**
   * 認証プロバイダーの設定
   * 
   * このアプリケーションでは、GitHub OAuthのみを使用しています。
   * GitHubアカウントを持っているユーザーは、簡単にログインできます。
   */
  providers: [
    GitHub({
      /**
       * GitHubプロファイル情報のマッピング
       * 
       * GitHubから取得したユーザー情報を、アプリケーションで使用する
       * 形式に変換します。これにより、一貫したユーザー情報を
       * アプリケーション全体で使用できます。
       * 
       * @param profile - GitHubから取得したプロファイル情報
       * @returns アプリケーション用のユーザー情報オブジェクト
       */
      profile(profile) {
        return {
          // GitHubの数値IDを文字列に変換して使用
          // これにより、データベースでの一意性を保証
          id: profile.id.toString(),
          
          // 表示名の決定ロジック
          // GitHubのnameが設定されていない場合は、login名を使用
          // これにより、必ず表示名が存在することを保証
          name: profile.name || profile.login,
          
          // メールアドレス（GitHubで公開設定されている場合のみ）
          // プライベート設定の場合はnullになる可能性がある
          email: profile.email,
          
          // アバター画像のURL
          // GitHubのプロフィール画像をそのまま使用
          image: profile.avatar_url,
        };
      },
    }),
  ],

  // ============================================================================
  // コールバック設定
  // ============================================================================
  
  /**
   * 認証フロー中のコールバック関数
   * 
   * これらのコールバックは、認証プロセスの各段階で呼び出され、
   * トークンやセッション情報をカスタマイズできます。
   */
  callbacks: {
    /**
     * JWTトークンのカスタマイズ
     * 
     * この関数は、JWTトークンが作成・更新される際に呼び出されます。
     * 初回サインイン時やトークンの更新時に、GitHubのプロファイル情報を
     * JWTトークンに保存します。
     * 
     * @param token - 現在のJWTトークン
     * @param profile - GitHubから取得したプロファイル情報
     * @param user - ユーザー情報
     * @returns カスタマイズされたJWTトークン
     */
    jwt({ token, profile, user }) {
      // 初回サインイン時の処理
      // userとprofileが存在する場合（初回サインイン時）のみ実行
      if (user && profile) {
        // GitHubの一意のIDをJWTトークンに保存
        // これにより、後でセッションからユーザーIDを取得できる
        token.id = profile.id;
      }
      
      // カスタマイズされたトークンを返す
      return token;
    },

    /**
     * セッション情報のカスタマイズ
     * 
     * この関数は、セッション情報が作成される際に呼び出されます。
     * JWTトークンからユーザーIDを取得し、セッション情報に追加します。
     * これにより、アプリケーション全体でユーザーIDを使用できます。
     * 
     * @param session - 現在のセッション情報
     * @param token - JWTトークン
     * @returns カスタマイズされたセッション情報
     */
    session({ session, token }) {
      // セッションにユーザー情報が存在する場合のみ処理
      if (session?.user) {
        // JWTトークンからGitHubの一意のIDを取得してセッションに追加
        // これにより、購入記録の管理やユーザー識別が可能になる
        session.user.id = token.id as string;
      }
      
      // カスタマイズされたセッション情報を返す
      return session;
    },
  },
});